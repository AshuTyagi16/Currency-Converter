[versions]
isMinifyEnabled = "true"
appVersionCode = "1"
appVersionName = "1.0"

minSdkVersion = "21"
compileSdkVersion = "34"
targetSdkVersion = "34"

jvmTargetVersion = "1.8"

kotlinCompilerExtensionVersion = "1.5.8"

agp = "8.2.1"
kotlin = "1.9.22"
core-ktx = "1.12.0"
junit = "4.13.2"
androidx-test-ext-junit = "1.1.5"
espresso-core = "3.5.1"
lifecycle-runtime-ktx = "2.7.0"
activity-compose = "1.8.2"
compose-bom = "2023.10.01"
coroutines = "1.7.3"
kermit = "2.0.2"
ktor = "2.3.7"
build-konfig = "0.15.1"
koin = "3.5.3"
kmm-bridge = "0.5.1"
skie = "0.6.1"
kotlin-serialization = "1.6.2"
store5 = "5.0.0"
kotlin-atomicfu = "0.23.1"
sqldelight = "2.0.1"
kotlin-datetime = "0.5.0"
appcompat = "1.6.1"
material = "1.11.0"
coil = "2.5.0"
navigation-component = "2.7.6"
ktlint-gradle = "12.1.0"
compose-shimmer = "1.2.0"
prferences = "1.1.1"
bignum = "0.3.8"
turbine = "1.0.0"
mockk = "2.0.1"

[libraries]
## Core-Ktx
core-ktx = { module = "androidx.core:core-ktx", version.ref = "core-ktx" }

## Lifecycle-Ktx
lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle-runtime-ktx" }
androidx-lifecycle-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle-runtime-ktx" }

## Compose Shimmer
compose-shimmer = { module = "com.valentinilk.shimmer:compose-shimmer", version.ref = "compose-shimmer" }

## Compose
activity-compose = { module = "androidx.activity:activity-compose", version.ref = "activity-compose" }
compose-bom = { module = "androidx.compose:compose-bom", version.ref = "compose-bom" }
ui = { module = "androidx.compose.ui:ui" }
ui-graphics = { module = "androidx.compose.ui:ui-graphics" }
ui-tooling = { module = "androidx.compose.ui:ui-tooling" }
ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview" }
ui-test-manifest = { module = "androidx.compose.ui:ui-test-manifest" }
ui-test-junit4 = { module = "androidx.compose.ui:ui-test-junit4" }
material3 = { module = "androidx.compose.material3:material3" }

## bignum
kotlin-bignum = { module = "com.ionspin.kotlin:bignum", version.ref = "bignum" }

## Ktor
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-serialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-encoding = { module = "io.ktor:ktor-client-encoding", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }

## Kotlin Libs
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlin-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlin-serialization" }
kotlin-atomicfu = { module = "org.jetbrains.kotlinx:atomicfu", version.ref = "kotlin-atomicfu" }
kotlin-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlin-datetime" }

## Coroutine
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }

## Logger
touchlab-kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
build-konfig = { module = "com.codingfeline.buildkonfig:buildkonfig-gradle-plugin", version.ref = "build-konfig" }

## Multiplatform preferences
multiplatform-settings = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "prferences" }
multiplatform-settings-couroutine = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "prferences" }
multiplatform-settings-test = { module = "com.russhwolf:multiplatform-settings-test", version.ref = "prferences" }


## Koin
koin = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koin" }
koin-test = { module = "io.insert-koin:koin-test", version.ref = "koin" }

## Store5
store = { module = "org.mobilenativefoundation.store:store5", version.ref = "store5" }

## Coil (Image Loading)
coil = { module = "io.coil-kt:coil-compose", version.ref = "coil" }

## Navigation Component
navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "navigation-component" }

## SqlDelight
sqldelight-runtime = { module = "app.cash.sqldelight:runtime", version.ref = "sqldelight" }
sqldelight-coroutines-extension = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }

sqldelight-android-driver = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-native-driver = { module = "app.cash.sqldelight:native-driver", version.ref = "sqldelight" }
sqldelight-jvm = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqldelight" }

## Testing
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
junit = { module = "junit:junit", version.ref = "junit" }
androidx-test-ext-junit = { module = "androidx.test.ext:junit", version.ref = "androidx-test-ext-junit" }
espresso-core = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso-core" }
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }
mockk = { module = "io.mockative:mockative", version.ref = "mockk" }

appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }
material = { module = "com.google.android.material:material", version.ref = "material" }

[plugins]
com-android-application = { id = "com.android.application", version.ref = "agp" }
com-android-library = { id = "com.android.library", version.ref = "agp" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
org-jetbrains-kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
org-jetbrains-kotlin-native-cocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
build-konfig = { id = "com.codingfeline.buildkonfig" }
kmm-bridge = { id = "co.touchlab.kmmbridge", version.ref = "kmm-bridge" }
skie = { id = "co.touchlab.skie", version.ref = "skie" }
sqldelight = { id = "app.cash.sqldelight", version.ref = "sqldelight" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint-gradle" }

[bundles]
ktor-android = [
    "ktor-client-okhttp"
]
ktor-ios = [
    "ktor-client-darwin"
]
ktor-common = [
    "ktor-client-core",
    "ktor-serialization",
    "ktor-client-content-negotiation",
    "ktor-client-logging",
    "ktor-client-auth",
    "ktor-client-encoding"
]
store = [
    "store",
    "kotlin-atomicfu"
]
sqldelight-common = [
    "sqldelight-runtime",
    "sqldelight-coroutines-extension"
]
sqldelight-android = [
    "sqldelight-android-driver"
]
sqldelight-native = [
    "sqldelight-native-driver"
]
multiplatform-preferences = [
    "multiplatform-settings",
    "multiplatform-settings-couroutine"
]
shared-commonTest = [
    "kotlin-test",
    "multiplatform-settings",
    "multiplatform-settings-test",
    "koin-test",
    "turbine",
    "coroutines-test",
    "ktor-client-mock",
    "mockk"
]
shared-androidTest = [
    "coroutines-test",
    "sqldelight-jvm"
]